import tkinter as tk
from tkinter import messagebox, filedialog, ttk
import threading
import os
import webbrowser
import requests
from PIL import Image, ImageTk
from io import BytesIO
from utils import AppUtils, UIConstants, AppConstants

class MainApplication:
    """Aplica√ß√£o principal com interface gr√°fica"""
    
    def __init__(self, download_manager, config_manager, history_manager, log_manager):
        """
        Inicializa a aplica√ß√£o principal
        
        Args:
            download_manager: Inst√¢ncia do DownloadManager
            config_manager: Inst√¢ncia do ConfigManager
            history_manager: Inst√¢ncia do HistoryManager
            log_manager: Inst√¢ncia do LogManager
        """
        self.download_manager = download_manager
        self.config_manager = config_manager
        self.history_manager = history_manager
        self.log_manager = log_manager
        
        # Configurar callbacks do download_manager
        self.download_manager.progress_callback = self.progress_hook
        self.download_manager.postprocessor_callback = self.postprocessor_hook
        
        # Estado da aplica√ß√£o
        self.current_resolutions = []
        
        # Criar interface
        self.setup_main_window()
        self.create_widgets()
        self.apply_initial_theme()
        
        self.log_manager.log_info("Aplica√ß√£o iniciada")
    
    def setup_main_window(self):
        """Configura a janela principal"""
        self.root = tk.Tk()
        self.root.title(UIConstants.APP_TITLE)
        self.root.geometry(self.config_manager.get_window_geometry())
        
        min_width, min_height = self.config_manager.get_min_window_size()
        self.root.minsize(min_width, min_height)
        
        # Maximizar a janela ao iniciar
        self.root.state('zoomed')  # Windows
        
        # Configurar fechamento da aplica√ß√£o
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def create_widgets(self):
        """Cria todos os widgets da interface"""
        # Criar notebook para abas
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=UIConstants.PADDING, pady=UIConstants.PADDING)
        
        # Criar abas
        self.create_download_tab()
        self.create_history_tab()
        self.create_config_tab()
    
    def create_download_tab(self):
        """Cria a aba de download"""
        self.download_frame = DownloadTab(
            self.notebook, 
            self.download_manager, 
            self.config_manager,
            self.history_manager,
            self.log_manager,
            main_app=self
        )
        self.notebook.add(self.download_frame.frame, text="üì• Download")
    
    def create_history_tab(self):
        """Cria a aba de hist√≥rico"""
        self.history_frame = HistoryTab(
            self.notebook,
            self.history_manager,
            self.log_manager
        )
        self.notebook.add(self.history_frame.frame, text="üìã Hist√≥rico")
    
    def create_config_tab(self):
        """Cria a aba de configura√ß√µes"""
        self.config_frame = ConfigTab(
            self.notebook,
            self.config_manager,
            self.apply_theme_callback
        )
        self.notebook.add(self.config_frame.frame, text="‚öôÔ∏è Configura√ß√µes")
    
    def apply_initial_theme(self):
        """Aplica tema inicial baseado nas configura√ß√µes"""
        self.apply_theme_callback(self.config_manager.get_theme())
    
    def apply_theme_callback(self, theme):
        """Callback para aplicar tema em toda a aplica√ß√£o"""
        self.config_manager.save_theme(theme)
        self.config_manager.apply_theme_to_children(self.root, theme)
    
    def progress_hook(self, d):
        """Hook para progresso do download"""
        if hasattr(self.download_frame, 'update_progress'):
            self.root.after(0, lambda: self.download_frame.update_progress(d))
    
    def postprocessor_hook(self, d):
        """Hook para p√≥s-processamento"""
        if hasattr(self.download_frame, 'update_postprocessor'):
            self.root.after(0, lambda: self.download_frame.update_postprocessor(d))
    
    def on_closing(self):
        """Callback para fechamento da aplica√ß√£o"""
        if self.download_manager.get_download_status()['is_downloading']:
            # Verificar se h√° download em andamento
            resposta = messagebox.askyesno(
                "Download em Andamento", 
                "H√° um download em andamento. Deseja realmente sair?\n\n"
                "‚ö†Ô∏è Aten√ß√£o: O download ser√° interrompido e os arquivos podem ficar incompletos."
            )
            if not resposta:
                return
        
        # Confirmar sa√≠da sempre
        resposta = messagebox.askyesno("Confirmar Sa√≠da", "Deseja realmente sair da aplica√ß√£o?")
        if resposta:
            self.log_manager.log_info("Aplica√ß√£o encerrada pelo usu√°rio")
            self.root.quit()
            self.root.destroy()
    
    def run(self):
        """Inicia o loop principal da aplica√ß√£o"""
        self.root.mainloop()

class DownloadTab:
    """Aba de download de v√≠deos"""
    
    def __init__(self, parent, download_manager, config_manager, history_manager, log_manager, main_app=None):
        """Inicializa a aba de download"""
        self.parent = parent
        self.main_app = main_app
        self.download_manager = download_manager
        self.config_manager = config_manager
        self.history_manager = history_manager
        self.log_manager = log_manager
        self.frame = tk.Frame(parent)
        
        self.create_widgets()
        self.setup_layout()
        self.load_last_directory()
        
    def create_widgets(self):
        """Cria widgets da aba de download"""
        # URL input
        self.url_label = tk.Label(self.frame, text="URL do v√≠deo:")
        self.url_entry = tk.Entry(self.frame, width=50)
        
        # Menu de contexto para URL
        self.create_context_menu()
        
        # Bot√£o extrair
        self.extract_button = tk.Button(
            self.frame, 
            text="Extrair informa√ß√µes", 
            command=self.extract_info
        )
        
        # Frame para resolu√ß√µes
        self.resolutions_frame = tk.Frame(self.frame)
        self.resolutions_label = tk.Label(self.resolutions_frame, text="Resolu√ß√µes:")
        self.resolutions_listbox = tk.Listbox(self.resolutions_frame, height=8)
        self.resolutions_listbox.bind("<<ListboxSelect>>", self.on_resolution_select)
        
        # Op√ß√£o de download apenas de √°udio
        self.audio_frame = tk.Frame(self.resolutions_frame)
        self.audio_only_var = tk.BooleanVar()
        self.audio_only_checkbox = tk.Checkbutton(
            self.audio_frame,
            text="Baixar apenas √°udio",
            variable=self.audio_only_var,
            command=self.on_audio_only_change
        )
        
        # Qualidade do √°udio
        self.audio_quality_label = tk.Label(self.audio_frame, text="Qualidade:")
        self.audio_quality_var = tk.StringVar(value=AppConstants.DEFAULT_AUDIO_QUALITY)
        self.audio_quality_combo = ttk.Combobox(
            self.audio_frame,
            textvariable=self.audio_quality_var,
            values=AppConstants.AUDIO_QUALITIES,
            state="readonly",
            width=8
        )
        self.audio_quality_combo.set(AppConstants.DEFAULT_AUDIO_QUALITY)
        
        # Frame para metadados
        self.metadata_frame = tk.Frame(self.frame)
        self.metadata_label = tk.Label(self.metadata_frame, text="Informa√ß√µes do V√≠deo:")
        
        # Widget de texto com funcionalidades melhoradas
        self.metadata_text = tk.Text(
            self.metadata_frame, 
            wrap=tk.WORD, 
            width=40, 
            height=12,  # Aumentar altura para mais conte√∫do
            state=tk.NORMAL,  # Permitir sele√ß√£o e c√≥pia
            cursor="xterm",  # Cursor de texto para indicar selecionabilidade
            selectbackground="#0078d4",  # Cor de sele√ß√£o
            selectforeground="white"
        )
        
        # Scrollbar para navega√ß√£o
        self.metadata_scrollbar = tk.Scrollbar(self.metadata_frame)
        self.metadata_text.config(yscrollcommand=self.metadata_scrollbar.set)
        self.metadata_scrollbar.config(command=self.metadata_text.yview)
        
        # Configurar tags para links clic√°veis
        self.metadata_text.tag_configure("link", foreground="#0066cc", underline=True)
        self.metadata_text.tag_configure("link_hover", foreground="#004499", underline=True)
        
        # Bind eventos para links
        self.metadata_text.tag_bind("link", "<Button-1>", self.on_link_click)
        self.metadata_text.tag_bind("link", "<Enter>", self.on_link_enter)
        self.metadata_text.tag_bind("link", "<Leave>", self.on_link_leave)
        
        # Menu de contexto para copiar
        self.create_metadata_context_menu()
        
        # Atalhos de teclado
        self.metadata_text.bind("<Control-c>", lambda e: self.copy_selected_text())
        self.metadata_text.bind("<Control-a>", lambda e: self.select_all_text())
        self.metadata_text.bind("<Control-A>", lambda e: self.select_all_text())  # Mai√∫sculo tamb√©m
        
        # Bot√£o download
        self.download_button = tk.Button(
            self.frame, 
            text="Baixar v√≠deo", 
            command=self.start_download,
            state=tk.DISABLED
        )
        
        # Frame de progresso
        self.progress_frame = tk.Frame(self.frame)
        self.progress_bar = ttk.Progressbar(
            self.progress_frame, 
            length=UIConstants.PROGRESS_BAR_LENGTH, 
            mode='determinate', 
            maximum=100
        )
        self.progress_label = tk.Label(self.progress_frame, text="")
        
        # Sele√ß√£o de diret√≥rio
        self.directory_button = tk.Button(
            self.frame, 
            text="Selecionar Diret√≥rio", 
            command=self.select_directory
        )
        self.directory_label = tk.Label(
            self.frame, 
            text=UIConstants.NO_DIRECTORY_TEXT,
            wraplength=800, 
            justify='left'
        )
        
        # Bot√£o sair
        self.exit_button = tk.Button(
            self.frame, 
            text="Sair", 
            command=self.main_app.on_closing if self.main_app else self.parent.master.quit,
            bg="#ff6b6b", 
            fg="white", 
            font=("Arial", 10, "bold")
        )
        
        # Mini-player de preview
        self.create_mini_player()
    
    def create_mini_player(self):
        """Cria o mini-player de preview do v√≠deo"""
        # Frame principal do mini-player (inicialmente oculto)
        self.mini_player_frame = tk.Frame(self.frame, relief=tk.RAISED, bd=1, height=120)
        
        # Frame para thumbnail com tamanho fixo
        self.thumbnail_frame = tk.Frame(self.mini_player_frame, width=160, height=100)
        self.thumbnail_frame.pack_propagate(False)  # Impedir redimensionamento do frame da thumbnail
        
        self.thumbnail_label = tk.Label(
            self.thumbnail_frame,
            text="üì∫",
            font=("Arial", 20),
            relief=tk.SUNKEN,
            bd=1,
            bg="#f0f0f0"
        )
        
        # Frame para informa√ß√µes do v√≠deo
        self.info_frame = tk.Frame(self.mini_player_frame)
        
        # T√≠tulo do v√≠deo
        self.video_title_label = tk.Label(
            self.info_frame,
            text="",
            font=("Arial", 10, "bold"),
            wraplength=300,
            justify=tk.LEFT,
            anchor='nw',
            height=2
        )
        
        # Informa√ß√µes adicionais (dura√ß√£o, canal, etc.)
        self.video_info_label = tk.Label(
            self.info_frame,
            text="",
            font=("Arial", 9),
            justify=tk.LEFT,
            anchor='nw',
            height=2
        )
        
        # Bot√£o para abrir v√≠deo no navegador
        self.preview_button = tk.Button(
            self.info_frame,
            text="üé¨ Preview",
            command=self.open_video_preview,
            font=("Arial", 9),
            bg="#4CAF50",
            fg="white",
            width=12,
            height=1
        )
        
        # Layout do mini-player com dimens√µes controladas
        self.thumbnail_label.pack(fill=tk.BOTH, expand=True)
        self.thumbnail_frame.pack(side=tk.LEFT, padx=5, pady=5)
        
        self.video_title_label.pack(anchor='nw', pady=(5, 2), fill=tk.X)
        self.video_info_label.pack(anchor='nw', pady=(0, 2), fill=tk.X)
        self.preview_button.pack(anchor='nw', pady=(5, 5))
        self.info_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Vari√°veis para armazenar dados do v√≠deo
        self.current_video_url = ""
        self.current_thumbnail_url = ""
        
    def open_video_preview(self):
        """Abre o v√≠deo no navegador para preview"""
        if self.current_video_url:
            try:
                webbrowser.open(self.current_video_url)
            except Exception as e:
                AppUtils.show_error_message("Erro", f"N√£o foi poss√≠vel abrir o v√≠deo: {str(e)}")
    
    def show_mini_player(self):
        """Exibe o mini-player com dimens√µes fixas"""
        # Configurar dimens√µes antes de posicionar
        self.mini_player_frame.configure(height=120)
        self.mini_player_frame.grid_propagate(False)
        
        # Garantir que o frame da thumbnail mantenha suas dimens√µes
        self.thumbnail_frame.configure(width=160, height=100)
        self.thumbnail_frame.pack_propagate(False)
        
        # Posicionar mini-player na row=4 (separado da barra de progresso)
        self.mini_player_frame.grid(
            row=4, 
            column=0, 
            columnspan=2, 
            sticky='ew', 
            pady=10,
            ipady=10  # Padding interno maior para garantir altura
        )
        
        # For√ßar atualiza√ß√£o da interface
        self.mini_player_frame.update_idletasks()
        self.thumbnail_frame.update_idletasks()
        
        # Log para debug
        self.log_manager.log_info("Mini-player exibido com dimens√µes fixas (altura: 120px, thumbnail: 160x100px)")
    
    def hide_mini_player(self):
        """Oculta o mini-player"""
        self.mini_player_frame.grid_remove()
    
    def update_mini_player(self, video_info):
        """Atualiza as informa√ß√µes do mini-player"""
        try:
            self.log_manager.log_info("Iniciando atualiza√ß√£o do mini-player")
            
            # Verificar se video_info √© v√°lido
            if not video_info or not isinstance(video_info, dict):
                self.log_manager.log_error("video_info inv√°lido para mini-player", "Mini-Player")
                self.hide_mini_player()
                return
            
            # Atualizar t√≠tulo
            title = video_info.get('title', 'T√≠tulo n√£o dispon√≠vel')
            if len(title) > UIConstants.MINI_PLAYER_MAX_TITLE_LENGTH:
                title = title[:UIConstants.MINI_PLAYER_MAX_TITLE_LENGTH] + "..."
            self.video_title_label.config(text=title)
            self.log_manager.log_info(f"T√≠tulo do mini-player atualizado: {title[:30]}...")
            
            # Atualizar informa√ß√µes
            duration = AppUtils.format_duration(video_info.get('duration', 0))
            uploader = video_info.get('uploader', 'Canal desconhecido')
            view_count = AppUtils.format_view_count(video_info.get('view_count', 0))
            
            info_text = f"üì∫ {uploader}\n‚è±Ô∏è {duration} | üëÅÔ∏è {view_count}"
            self.video_info_label.config(text=info_text)
            
            # Armazenar URL do v√≠deo
            self.current_video_url = video_info.get('webpage_url', '')
            
            # Tentar carregar thumbnail
            thumbnail_url = video_info.get('thumbnail')
            if thumbnail_url:
                self.log_manager.log_info(f"Carregando thumbnail: {thumbnail_url[:50]}...")
                self.load_thumbnail(thumbnail_url)
            else:
                self.log_manager.log_info("Nenhuma thumbnail dispon√≠vel")
            
            # Exibir mini-player
            self.show_mini_player()
            self.log_manager.log_info("Mini-player atualizado e exibido com sucesso")
            
        except Exception as e:
            self.log_manager.log_error(e, "Erro ao atualizar mini-player")
            print(f"Erro ao atualizar mini-player: {e}")
            self.hide_mini_player()
    
    def load_thumbnail(self, thumbnail_url):
        """Carrega e exibe a thumbnail do v√≠deo"""
        if not thumbnail_url:
            self.log_manager.log_info("URL da thumbnail n√£o fornecida")
            return
            
        def download_and_display():
            try:
                self.log_manager.log_info(f"Iniciando download da thumbnail: {thumbnail_url[:100]}...")
                
                # Download da thumbnail
                response = requests.get(thumbnail_url, timeout=15, headers={
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                })
                response.raise_for_status()
                
                self.log_manager.log_info(f"Thumbnail baixada com sucesso. Tamanho: {len(response.content)} bytes")
                
                # Processar imagem
                image = Image.open(BytesIO(response.content))
                original_size = image.size
                
                image = image.resize(
                    (UIConstants.MINI_PLAYER_THUMBNAIL_WIDTH, UIConstants.MINI_PLAYER_THUMBNAIL_HEIGHT),
                    Image.Resampling.LANCZOS
                )
                
                self.log_manager.log_info(f"Imagem redimensionada de {original_size} para {image.size}")
                
                # Converter para PhotoImage
                photo = ImageTk.PhotoImage(image)
                
                # Atualizar label na thread principal usando after
                def update_ui():
                    try:
                        self.thumbnail_label.config(image=photo, text="")
                        self.thumbnail_label.image = photo  # Manter refer√™ncia
                        self.log_manager.log_info("Thumbnail exibida com sucesso no mini-player")
                    except Exception as ui_error:
                        self.log_manager.log_error(ui_error, "Erro ao atualizar UI da thumbnail")
                
                # Usar after para thread safety
                self.thumbnail_label.after(0, update_ui)
                
            except requests.exceptions.Timeout:
                self.log_manager.log_error("Timeout ao baixar thumbnail", "Mini-Player")
            except requests.exceptions.RequestException as req_error:
                self.log_manager.log_error(req_error, "Erro de rede ao baixar thumbnail")
            except Exception as e:
                self.log_manager.log_error(e, "Erro geral ao carregar thumbnail")
                print(f"Erro ao carregar thumbnail: {e}")
        
        # Executar download em thread separada
        threading.Thread(target=download_and_display, daemon=True).start()
    
    def create_context_menu(self):
        """Cria menu de contexto para o campo URL"""
        self.context_menu = tk.Menu(self.frame, tearoff=0)
        self.context_menu.add_command(label="Colar", command=self.paste_url)
        self.url_entry.bind("<Button-3>", self.show_context_menu)
    
    def create_metadata_context_menu(self):
        """Cria menu de contexto para o widget de metadados"""
        self.metadata_context_menu = tk.Menu(self.frame, tearoff=0)
        self.metadata_context_menu.add_command(label="üìã Copiar Sele√ß√£o", command=self.copy_selected_text)
        self.metadata_context_menu.add_command(label="üìÑ Copiar Tudo", command=self.copy_all_text)
        self.metadata_context_menu.add_separator()
        self.metadata_context_menu.add_command(label="üîç Selecionar Tudo", command=self.select_all_text)
        
        # Bind do menu ao widget de metadados
        self.metadata_text.bind("<Button-3>", self.show_metadata_context_menu)
    
    def show_metadata_context_menu(self, event):
        """Mostra menu de contexto para metadados"""
        try:
            self.metadata_context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.metadata_context_menu.grab_release()
    
    def copy_selected_text(self):
        """Copia texto selecionado dos metadados"""
        try:
            selected_text = self.metadata_text.selection_get()
            if selected_text:
                self.metadata_text.clipboard_clear()
                self.metadata_text.clipboard_append(selected_text)
                self.log_manager.log_info("Texto selecionado copiado para √°rea de transfer√™ncia")
        except tk.TclError:
            AppUtils.show_error_message("Erro", "Nenhum texto selecionado")
    
    def copy_all_text(self):
        """Copia todo o texto dos metadados"""
        try:
            all_text = self.metadata_text.get("1.0", tk.END)
            if all_text.strip():
                self.metadata_text.clipboard_clear()
                self.metadata_text.clipboard_append(all_text.strip())
                self.log_manager.log_info("Todo o texto dos metadados copiado")
        except Exception as e:
            self.log_manager.log_error(e, "Erro ao copiar texto")
    
    def select_all_text(self):
        """Seleciona todo o texto dos metadados"""
        try:
            self.metadata_text.tag_add(tk.SEL, "1.0", tk.END)
            self.metadata_text.mark_set(tk.INSERT, "1.0")
            self.metadata_text.see(tk.INSERT)
        except Exception as e:
            self.log_manager.log_error(e, "Erro ao selecionar texto")
    
    def on_link_click(self, event):
        """Callback para clique em links"""
        try:
            # Obter posi√ß√£o do clique
            index = self.metadata_text.index(f"@{event.x},{event.y}")
            
            # Verificar se h√° uma tag de link na posi√ß√£o
            tags = self.metadata_text.tag_names(index)
            if "link" in tags:
                # Obter o texto do link
                ranges = self.metadata_text.tag_ranges("link")
                for i in range(0, len(ranges), 2):
                    start, end = ranges[i], ranges[i+1]
                    if self.metadata_text.compare(start, "<=", index) and self.metadata_text.compare(index, "<", end):
                        link_text = self.metadata_text.get(start, end)
                        if link_text.startswith("http"):
                            webbrowser.open(link_text)
                            self.log_manager.log_info(f"Link aberto: {link_text}")
                        break
        except Exception as e:
            self.log_manager.log_error(e, "Erro ao processar clique em link")
    
    def on_link_enter(self, event):
        """Callback para mouse sobre link"""
        self.metadata_text.config(cursor="hand2")
    
    def on_link_leave(self, event):
        """Callback para mouse sair do link"""
        self.metadata_text.config(cursor="xterm")
    
    def _insert_text_with_links(self, text):
        """Insere texto detectando e formatando links automaticamente"""
        import re
        
        # Padr√£o para detectar URLs
        url_pattern = r'https?://[^\s<>"{}|\\^`\[\]]+'
        
        # Encontrar todas as URLs no texto
        urls = list(re.finditer(url_pattern, text))
        
        if not urls:
            # Nenhum link encontrado, inserir texto normal
            self.metadata_text.insert(tk.END, text)
            return
        
        # Processar texto com links
        last_end = 0
        
        for match in urls:
            start, end = match.span()
            url = match.group()
            
            # Inserir texto antes do link
            if start > last_end:
                self.metadata_text.insert(tk.END, text[last_end:start])
            
            # Inserir link com formata√ß√£o
            link_start = self.metadata_text.index(tk.INSERT)
            self.metadata_text.insert(tk.END, url)
            link_end = self.metadata_text.index(tk.INSERT)
            self.metadata_text.tag_add("link", link_start, link_end)
            
            last_end = end
        
        # Inserir texto restante ap√≥s o √∫ltimo link
        if last_end < len(text):
            self.metadata_text.insert(tk.END, text[last_end:])
        
        self.log_manager.log_info(f"Texto inserido com {len(urls)} links detectados")
    
    def setup_layout(self):
        """Configura layout da aba"""
        # Configurar grid (reorganizado para evitar conflitos)
        for i in range(12):  # Aumentado para acomodar todos os elementos
            if i == 2:  # Linha dos frames principais
                self.frame.rowconfigure(i, weight=1, pad=UIConstants.PADDING)
            elif i == 4:  # Linha do mini-player - altura m√≠nima garantida
                self.frame.rowconfigure(i, minsize=130, pad=UIConstants.PADDING)
            else:
                self.frame.rowconfigure(i, pad=UIConstants.PADDING)
        
        for i in range(2):
            self.frame.columnconfigure(i, weight=1, pad=UIConstants.PADDING)
        
        # Posicionar widgets com layout reorganizado
        self.url_label.grid(row=0, column=0, sticky='w')
        self.url_entry.grid(row=0, column=1, sticky='ew')
        
        self.extract_button.grid(row=1, column=0, columnspan=2, pady=UIConstants.BUTTON_PADDING)
        
        # Frames principais
        self.resolutions_frame.grid(row=2, column=0, sticky='nsew', padx=(0, 5))
        self.metadata_frame.grid(row=2, column=1, sticky='nsew', padx=(5, 0))
        
        # Layout do frame de resolu√ß√µes
        self.resolutions_label.pack()
        self.resolutions_listbox.pack(fill=tk.BOTH, expand=True)
        
        # Layout do frame de √°udio
        self.audio_frame.pack(fill=tk.X, pady=5)
        self.audio_only_checkbox.pack(anchor='w')
        
        # Frame para qualidade de √°udio (inicialmente oculto)
        self.audio_quality_frame = tk.Frame(self.audio_frame)
        self.audio_quality_label.pack(side=tk.LEFT)
        self.audio_quality_combo.pack(side=tk.LEFT, padx=(5, 0))
        
        # Layout do frame de metadados
        self.metadata_label.pack()
        self.metadata_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.metadata_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.download_button.grid(row=3, column=0, columnspan=2, pady=UIConstants.BUTTON_PADDING)
        
        # Mini-player (row=4) - ser√° posicionado dinamicamente
        # Progress frame (row=5) - ser√° posicionado dinamicamente
        
        self.directory_button.grid(row=7, column=0, columnspan=2, pady=UIConstants.BUTTON_PADDING)
        self.directory_label.grid(row=8, column=0, columnspan=2, sticky='ew', padx=UIConstants.PADDING)
        
        self.exit_button.grid(row=9, column=0, columnspan=2, pady=UIConstants.PADDING)
    
    def show_context_menu(self, event):
        """Mostra menu de contexto"""
        try:
            self.context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu.grab_release()
    
    def paste_url(self):
        """Cola URL da √°rea de transfer√™ncia"""
        try:
            clipboard_content = AppUtils.safe_get_clipboard()
            if clipboard_content:
                self.url_entry.delete(0, tk.END)
                self.url_entry.insert(0, clipboard_content)
                self.log_manager.log_info("URL colada da √°rea de transfer√™ncia")
        except Exception as e:
            self.log_manager.log_error(e, "Erro ao colar URL")
    
    def extract_info(self):
        """Extrai informa√ß√µes do v√≠deo"""
        url = self.url_entry.get().strip()
        
        if not url:
            AppUtils.show_error_message("Erro", "Por favor, insira a URL do v√≠deo.")
            return
        
        # Desabilitar bot√£o durante extra√ß√£o
        self.extract_button.config(state=tk.DISABLED, text="Extraindo...")
        
        def extract_worker():
            success, data, resolutions = self.download_manager.extract_video_info(url)
            
            # Atualizar UI de forma thread-safe
            self.frame.after(0, lambda: self.on_extraction_complete(success, data, resolutions))
        
        # Executar em thread separada
        thread = threading.Thread(target=extract_worker, daemon=True)
        thread.start()
    
    def on_extraction_complete(self, success, data, resolutions):
        """Callback para conclus√£o da extra√ß√£o"""
        # Log do resultado da extra√ß√£o
        self.log_manager.log_info(f"Extra√ß√£o conclu√≠da - Sucesso: {success}")
        
        # Reabilitar bot√£o
        self.extract_button.config(state=tk.NORMAL, text="Extrair informa√ß√µes")
        
        if success:
            self.log_manager.log_info(f"Dados extra√≠dos: T√≠tulo = {data.get('title', 'N/A')[:50]}...")
            self.log_manager.log_info(f"Resolu√ß√µes recebidas: {len(resolutions)} itens - {resolutions}")
            
            # Atualizar interface com dados extra√≠dos
            self.update_resolutions(resolutions)
            self.update_metadata(data)
            self.enable_download_if_ready()
            
            # Ocultar mini-player anterior e mostrar novo se dados v√°lidos
            self.hide_mini_player()
            if data and isinstance(data, dict):
                self.update_mini_player(data)
            
            self.log_manager.log_info("Interface atualizada com sucesso ap√≥s extra√ß√£o")
        else:
            self.log_manager.log_error(f"Erro na extra√ß√£o: {data}", "Extra√ß√£o de Informa√ß√µes")
            AppUtils.show_error_message("Erro", data)
            
            # Limpar interface em caso de erro
            self.hide_mini_player()
            self.resolutions_listbox.delete(0, tk.END)
            self.metadata_text.delete("1.0", tk.END)
    
    def update_resolutions(self, resolutions):
        """Atualiza lista de resolu√ß√µes"""
        # Log para debug
        self.log_manager.log_info(f"Atualizando lista de resolu√ß√µes: {resolutions}")
        
        # Limpar lista atual
        self.resolutions_listbox.delete(0, tk.END)
        self.current_resolutions = resolutions
        
        # Verificar se h√° resolu√ß√µes v√°lidas
        if not resolutions:
            self.log_manager.log_warning("Nenhuma resolu√ß√£o recebida para atualiza√ß√£o")
            self.resolutions_listbox.insert(tk.END, "Nenhuma resolu√ß√£o dispon√≠vel")
            return
        
        # Inserir resolu√ß√µes na lista
        for i, resolution in enumerate(resolutions):
            self.resolutions_listbox.insert(tk.END, resolution)
            self.log_manager.log_info(f"Resolu√ß√£o {i+1}: {resolution}")
        
        # Selecionar primeira resolu√ß√£o automaticamente se dispon√≠vel
        if len(resolutions) > 0 and resolutions[0] != "Nenhuma resolu√ß√£o dispon√≠vel":
            self.resolutions_listbox.selection_set(0)
            self.log_manager.log_info(f"Primeira resolu√ß√£o selecionada automaticamente: {resolutions[0]}")
        
        self.log_manager.log_info(f"Lista de resolu√ß√µes atualizada com {len(resolutions)} itens")
    
    def update_metadata(self, video_info):
        """Atualiza metadados do v√≠deo com conte√∫do completo e links clic√°veis"""
        self.metadata_text.delete("1.0", tk.END)
        
        if isinstance(video_info, dict):
            metadata = self.download_manager.get_video_metadata()
            
            # T√≠tulo
            title = metadata.get('title', 'N/A')
            self.metadata_text.insert(tk.END, f"üì∫ T√≠tulo: {title}\n\n")
            
            # Canal/Uploader
            uploader = metadata.get('uploader', 'N/A')
            self.metadata_text.insert(tk.END, f"üë§ Canal: {uploader}\n\n")
            
            # Dura√ß√£o formatada
            duration = metadata.get('duration', 'N/A')
            if duration != 'N/A' and isinstance(duration, (int, float)):
                hours = int(duration // 3600)
                minutes = int((duration % 3600) // 60)
                seconds = int(duration % 60)
                if hours > 0:
                    duration_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
                else:
                    duration_str = f"{minutes:02d}:{seconds:02d}"
                self.metadata_text.insert(tk.END, f"‚è±Ô∏è Dura√ß√£o: {duration_str}\n\n")
            else:
                self.metadata_text.insert(tk.END, f"‚è±Ô∏è Dura√ß√£o: {duration}\n\n")
            
            # Visualiza√ß√µes formatadas
            view_count = metadata.get('view_count', 'N/A')
            if view_count != 'N/A' and isinstance(view_count, (int, float)):
                view_count_str = f"{int(view_count):,}".replace(',', '.')
                self.metadata_text.insert(tk.END, f"üëÅÔ∏è Visualiza√ß√µes: {view_count_str}\n\n")
            else:
                self.metadata_text.insert(tk.END, f"üëÅÔ∏è Visualiza√ß√µes: {view_count}\n\n")
            
            # Data de upload formatada
            upload_date = metadata.get('upload_date', 'N/A')
            if upload_date != 'N/A' and len(str(upload_date)) == 8:
                try:
                    date_str = str(upload_date)
                    formatted_date = f"{date_str[6:8]}/{date_str[4:6]}/{date_str[0:4]}"
                    self.metadata_text.insert(tk.END, f"üìÖ Data de Upload: {formatted_date}\n\n")
                except:
                    self.metadata_text.insert(tk.END, f"üìÖ Data de Upload: {upload_date}\n\n")
            else:
                self.metadata_text.insert(tk.END, f"üìÖ Data de Upload: {upload_date}\n\n")
            
            # URL do v√≠deo
            webpage_url = metadata.get('webpage_url', 'N/A')
            if webpage_url != 'N/A':
                self.metadata_text.insert(tk.END, "üîó URL: ")
                start_pos = self.metadata_text.index(tk.INSERT)
                self.metadata_text.insert(tk.END, webpage_url)
                end_pos = self.metadata_text.index(tk.INSERT)
                self.metadata_text.tag_add("link", start_pos, end_pos)
                self.metadata_text.insert(tk.END, "\n\n")
            
            # Descri√ß√£o COMPLETA (sem cortes)
            description = metadata.get('description', 'N/A')
            if description != 'N/A' and description and description.strip():
                self.metadata_text.insert(tk.END, "üìù Descri√ß√£o:\n")
                
                # Processar descri√ß√£o para detectar links
                self._insert_text_with_links(description)
            else:
                self.metadata_text.insert(tk.END, "üìù Descri√ß√£o: N√£o dispon√≠vel")
            
            # Log para debug
            self.log_manager.log_info(f"Metadados completos atualizados para: {title[:50]}...")
            
            # Atualizar mini-player com informa√ß√µes do v√≠deo
            self.update_mini_player(video_info)
        else:
            self.metadata_text.insert(tk.END, "‚ùå Erro: Informa√ß√µes do v√≠deo n√£o dispon√≠veis")
            self.log_manager.log_error("video_info inv√°lido em update_metadata", "UI")
            # Ocultar mini-player em caso de erro
            self.hide_mini_player()
    
    def on_resolution_select(self, event):
        """Callback para sele√ß√£o de resolu√ß√£o"""
        self.enable_download_if_ready()
    
    def on_audio_only_change(self):
        """Callback para mudan√ßa na op√ß√£o de √°udio apenas"""
        if self.audio_only_var.get():
            # Desabilitar sele√ß√£o de resolu√ß√£o e mostrar op√ß√µes de √°udio
            self.resolutions_listbox.config(state=tk.DISABLED)
            self.audio_quality_frame.pack(fill=tk.X, pady=2)
        else:
            # Habilitar sele√ß√£o de resolu√ß√£o e ocultar op√ß√µes de √°udio
            self.resolutions_listbox.config(state=tk.NORMAL)
            self.audio_quality_frame.pack_forget()
        
        self.enable_download_if_ready()
    
    def select_directory(self):
        """Seleciona diret√≥rio de download"""
        directory = filedialog.askdirectory()
        if directory:
            success, error_msg = self.download_manager.set_download_directory(directory)
            if success:
                self.directory_label.config(text=f"Diret√≥rio: {directory}")
                self.enable_download_if_ready()
                
                # Salvar √∫ltimo diret√≥rio selecionado (funcionalidade restaurada)
                try:
                    self.config_manager.db_manager.set_setting('last_download_directory', directory)
                    self.log_manager.log_info(f"√öltimo diret√≥rio salvo: {directory}")
                except Exception as e:
                    self.log_manager.log_error(str(e), "Erro ao salvar √∫ltimo diret√≥rio")
            else:
                AppUtils.show_error_message("Erro", error_msg)
    
    def enable_download_if_ready(self):
        """Habilita bot√£o de download se tudo estiver pronto"""
        has_directory = bool(self.download_manager.download_directory)
        has_info = self.download_manager.get_download_status()['has_info']
        
        # Verificar se tem resolu√ß√£o selecionada OU se √© download apenas de √°udio
        if self.audio_only_var.get():
            has_format = True  # Para √°udio, n√£o precisa de resolu√ß√£o espec√≠fica
            button_text = "Baixar √°udio"
        else:
            has_format = bool(self.resolutions_listbox.curselection())
            button_text = "Baixar v√≠deo"
        
        if has_format and has_directory and has_info:
            self.download_button.config(state=tk.NORMAL, text=button_text)
        else:
            self.download_button.config(state=tk.DISABLED, text=button_text)
    
    def start_download(self):
        """Inicia o download"""
        url = self.url_entry.get().strip()
        
        # Verificar se √© download de √°udio ou v√≠deo
        if self.audio_only_var.get():
            # Download apenas de √°udio
            audio_quality = self.audio_quality_var.get()
            selected_resolution = None
            download_type = "√°udio"
        else:
            # Download de v√≠deo
            selected_index = self.resolutions_listbox.curselection()
            if not selected_index:
                AppUtils.show_error_message("Erro", "Por favor, selecione uma resolu√ß√£o.")
                return
            selected_resolution = self.resolutions_listbox.get(selected_index)
            audio_quality = None
            download_type = "v√≠deo"
        
        # Preparar interface para download
        self.download_button.config(state=tk.DISABLED, text=f"Baixando {download_type}...")
        self.show_progress_bar()
        
        # Iniciar download
        success, message = self.download_manager.start_download(
            url, 
            selected_resolution,
            success_callback=self.on_download_success,
            error_callback=self.on_download_error,
            audio_only=self.audio_only_var.get(),
            audio_quality=audio_quality
        )
        
        if not success:
            AppUtils.show_error_message("Erro", message)
            self.reset_download_ui()
    
    def show_progress_bar(self):
        """Mostra barra de progresso"""
        # Configurar layout interno do progress_frame APENAS se n√£o estiver configurado
        if not self.progress_bar.winfo_manager():
            self.progress_bar.pack(fill=tk.X, pady=2)
            self.progress_label.pack()
        
        # Posicionar o frame no grid (row=5 para evitar conflito com mini-player)
        self.progress_frame.grid(row=5, column=0, columnspan=2, sticky='ew', padx=UIConstants.PADDING, pady=UIConstants.BUTTON_PADDING)
        self.progress_bar['value'] = 0
        self.progress_label.config(text="Preparando download...")
        
        # For√ßar atualiza√ß√£o da interface
        self.progress_frame.update_idletasks()
        self.frame.update_idletasks()
    
    def hide_progress_bar(self):
        """Esconde barra de progresso"""
        self.progress_frame.grid_remove()
        # Limpar layout interno para evitar problemas na pr√≥xima exibi√ß√£o
        self.progress_bar.pack_forget()
        self.progress_label.pack_forget()
    
    def update_progress(self, d):
        """Atualiza progresso do download"""
        if d['status'] == 'downloading':
            try:
                percent = self.extract_progress_percent(d)
                speed_str = d.get('_speed_str', d.get('speed', 'N/A'))
                eta_str = d.get('_eta_str', d.get('eta', 'N/A'))
                
                # Limitar a 90% para reservar espa√ßo para merge
                display_percent = min(percent * 0.9, UIConstants.DOWNLOAD_PROGRESS_LIMIT)
                
                self.progress_bar['value'] = display_percent
                self.progress_label.config(
                    text=f"Progresso: {display_percent:.1f}% | Velocidade: {speed_str} | ETA: {eta_str}"
                )
                
            except Exception as e:
                self.log_manager.log_error(e, "Erro no progress_hook")
        
        elif d['status'] == 'finished':
            self.progress_bar['value'] = UIConstants.DOWNLOAD_PROGRESS_LIMIT
            self.progress_label.config(text="90% | Preparando merge...")
    
    def extract_progress_percent(self, d):
        """Extrai porcentagem de progresso dos dados do yt-dlp"""
        # Tentar v√°rias formas de obter porcentagem
        if 'downloaded_bytes' in d and 'total_bytes' in d and d['total_bytes']:
            return (d['downloaded_bytes'] / d['total_bytes']) * 100
        elif 'downloaded_bytes' in d and 'total_bytes_estimate' in d and d['total_bytes_estimate']:
            return (d['downloaded_bytes'] / d['total_bytes_estimate']) * 100
        elif '_percent_str' in d:
            percent_str = str(d['_percent_str']).strip()
            return float(percent_str.replace('%', ''))
        else:
            return 0
    
    def update_postprocessor(self, d):
        """Atualiza progresso do p√≥s-processamento"""
        if d['status'] == 'started':
            if 'FFmpegVideoRemuxer' in str(d.get('postprocessor', '')):
                self.progress_bar['value'] = UIConstants.MERGE_PROGRESS_START
                self.progress_label.config(text="92% | Fazendo merge...")
            elif 'FFmpegMerger' in str(d.get('postprocessor', '')):
                self.progress_bar['value'] = UIConstants.MERGE_PROGRESS_END
                self.progress_label.config(text="95% | Finalizando merge...")
        elif d['status'] == 'finished':
            self.progress_bar['value'] = UIConstants.MERGE_PROGRESS_END
            self.progress_label.config(text="98% | Limpando arquivos...")
    
    def on_download_success(self):
        """Callback para download bem-sucedido"""
        self.progress_bar['value'] = 100
        self.progress_label.config(text="Download conclu√≠do!")
        
        # Adicionar ao hist√≥rico
        self.add_to_history()
        
        # Auto-abrir pasta se configurado
        if self.config_manager.should_auto_open_folder():
            try:
                import os
                os.startfile(self.download_manager.download_directory)
            except Exception as e:
                self.log_manager.log_error(e, "Erro ao abrir pasta automaticamente")
        
        # Exibir aviso de sucesso
        messagebox.showinfo("Sucesso", "Download conclu√≠do com sucesso!")
        
        # Resetar UI ap√≥s delay
        self.frame.after(3000, self.reset_download_ui)
    
    def on_download_error(self, error_msg):
        """Callback para erro no download"""
        AppUtils.show_error_message("Erro no Download", error_msg)
        self.reset_download_ui()
    
    def add_to_history(self):
        """Adiciona download ao hist√≥rico"""
        try:
            metadata = self.download_manager.get_video_metadata()
            
            # Determinar resolu√ß√£o baseada no tipo de download
            if self.audio_only_var.get():
                # Para downloads de √°udio, usar 'music' ao inv√©s de 'N/A'
                resolution = 'music'
            else:
                # Para downloads de v√≠deo, obter resolu√ß√£o selecionada
                selected_index = self.resolutions_listbox.curselection()
                resolution = self.resolutions_listbox.get(selected_index) if selected_index else 'N/A'
            
            # Obter informa√ß√µes do v√≠deo atual
            current_info = self.download_manager.current_info
            
            # Calcular tamanho estimado do arquivo
            file_size = 'N/A'
            if current_info:
                if self.audio_only_var.get():
                    # Para √°udio, estimar baseado na dura√ß√£o (aproximadamente 1MB por minuto para 192kbps)
                    duration = current_info.get('duration', 0)
                    if duration and isinstance(duration, (int, float)):
                        # Estimar tamanho do √°udio em bytes (192kbps = 24KB/s)
                        estimated_size = int(duration * 24 * 1024)  # bytes
                        file_size = str(estimated_size)
                else:
                    # Para v√≠deo, tentar obter tamanho aproximado
                    file_size = str(current_info.get('filesize_approx', 'N/A'))
                    if file_size == 'None':
                        file_size = 'N/A'
            
            # Obter caminho do diret√≥rio de download
            download_path = self.download_manager.download_directory or ''
            
            # Obter URL da thumbnail
            thumbnail_url = ''
            if current_info:
                thumbnail_url = current_info.get('thumbnail', '')
            
            download_data = {
                'url': self.url_entry.get().strip(),
                'title': metadata.get('title', 'N/A'),
                'duration': metadata.get('duration', 'N/A'),
                'resolution': resolution,
                'file_size': file_size,
                'download_path': download_path,
                'thumbnail_url': thumbnail_url,
                'uploader': metadata.get('uploader', 'N/A'),
                'view_count': metadata.get('view_count', 0),
                'description': metadata.get('description', '')
            }
            
            # Log para debug
            self.log_manager.log_info(
                f"Adicionando ao hist√≥rico - Tipo: {'√°udio' if self.audio_only_var.get() else 'v√≠deo'}, "
                f"Resolu√ß√£o: {resolution}, File_size: {file_size}, Path: {download_path}, "
                f"Thumbnail: {'Sim' if thumbnail_url else 'N√£o'}"
            )
            
            self.history_manager.add_download_to_history(download_data)
            
        except Exception as e:
            self.log_manager.log_error(e, "Erro ao adicionar ao hist√≥rico")
    
    def reset_download_ui(self):
        """Reseta interface ap√≥s download"""
        # Resetar texto do bot√£o baseado na op√ß√£o atual
        button_text = "Baixar √°udio" if self.audio_only_var.get() else "Baixar v√≠deo"
        self.download_button.config(state=tk.DISABLED, text=button_text)
        self.hide_progress_bar()
        
        # Ocultar mini-player
        self.hide_mini_player()
        
        # Resetar op√ß√µes de √°udio se necess√°rio
        if self.audio_only_var.get():
            self.audio_quality_var.set(AppConstants.DEFAULT_AUDIO_QUALITY)
        self.enable_download_if_ready()
    
    def load_last_directory(self):
        """Carrega o √∫ltimo diret√≥rio usado"""
        try:
            last_directory = self.config_manager.db_manager.get_setting('last_download_directory')
            if last_directory and os.path.exists(last_directory):
                success, error_msg = self.download_manager.set_download_directory(last_directory)
                if success:
                    self.directory_label.config(text=f"Diret√≥rio: {last_directory}")
                    self.log_manager.log_info(f"√öltimo diret√≥rio carregado: {last_directory}")
                else:
                    self.log_manager.log_error(error_msg, "Erro ao carregar √∫ltimo diret√≥rio")
        except Exception as e:
            self.log_manager.log_error(str(e), "Erro ao carregar √∫ltimo diret√≥rio")

class HistoryTab:
    """Aba de hist√≥rico de downloads"""
    
    def __init__(self, parent, history_manager, log_manager):
        self.parent = parent
        self.history_manager = history_manager
        self.log_manager = log_manager
        
        self.frame = tk.Frame(parent)
        self.create_widgets()
        self.setup_layout()
        self.update_history()
    
    def create_widgets(self):
        """Cria widgets da aba de hist√≥rico"""
        # Frame de controles
        self.controls_frame = tk.Frame(self.frame)
        
        self.refresh_button = tk.Button(
            self.controls_frame,
            text="üîÑ Atualizar",
            command=self.update_history
        )
        
        self.clear_button = tk.Button(
            self.controls_frame,
            text="üóëÔ∏è Limpar Hist√≥rico",
            command=self.clear_history
        )
        
        # Treeview para hist√≥rico
        self.tree_frame = tk.Frame(self.frame)
        
        columns = ('ID', 'T√≠tulo', 'Resolu√ß√£o', 'Data', 'Status')
        self.history_tree = ttk.Treeview(self.tree_frame, columns=columns, show='headings', height=15)
        
        # Configurar colunas
        self.history_tree.heading('ID', text='ID')
        self.history_tree.heading('T√≠tulo', text='T√≠tulo')
        self.history_tree.heading('Resolu√ß√£o', text='Resolu√ß√£o')
        self.history_tree.heading('Data', text='Data')
        self.history_tree.heading('Status', text='Status')
        
        self.history_tree.column('ID', width=50)
        self.history_tree.column('T√≠tulo', width=300)
        self.history_tree.column('Resolu√ß√£o', width=100)
        self.history_tree.column('Data', width=150)
        self.history_tree.column('Status', width=100)
        
        # Scrollbar para treeview
        self.tree_scrollbar = ttk.Scrollbar(self.tree_frame, orient=tk.VERTICAL, command=self.history_tree.yview)
        self.history_tree.configure(yscrollcommand=self.tree_scrollbar.set)
        
        # Menu de contexto
        self.create_context_menu()
    
    def create_context_menu(self):
        """Cria menu de contexto para o hist√≥rico"""
        self.context_menu = tk.Menu(self.frame, tearoff=0)
        self.context_menu.add_command(label="Abrir Arquivo", command=self.open_file)
        self.context_menu.add_command(label="Abrir Pasta", command=self.open_folder)
        self.context_menu.add_command(label="Copiar URL", command=self.copy_url)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="Remover do Hist√≥rico", command=self.remove_item)
        
        self.history_tree.bind("<Button-3>", self.show_context_menu)
    
    def setup_layout(self):
        """Configura layout da aba"""
        self.frame.rowconfigure(1, weight=1)
        self.frame.columnconfigure(0, weight=1)
        
        # Controles
        self.controls_frame.grid(row=0, column=0, sticky='ew', padx=UIConstants.PADDING, pady=UIConstants.BUTTON_PADDING)
        self.refresh_button.pack(side=tk.LEFT, padx=(0, 5))
        self.clear_button.pack(side=tk.LEFT)
        
        # Treeview
        self.tree_frame.grid(row=1, column=0, sticky='nsew', padx=UIConstants.PADDING, pady=UIConstants.PADDING)
        self.tree_frame.rowconfigure(0, weight=1)
        self.tree_frame.columnconfigure(0, weight=1)
        
        self.history_tree.grid(row=0, column=0, sticky='nsew')
        self.tree_scrollbar.grid(row=0, column=1, sticky='ns')
    
    def update_history(self):
        """Atualiza lista do hist√≥rico"""
        # Limpar itens existentes
        for item in self.history_tree.get_children():
            self.history_tree.delete(item)
        
        # Obter downloads recentes
        downloads = self.history_manager.get_recent_downloads()
        
        # Adicionar ao treeview
        for download in downloads:
            self.history_tree.insert('', 'end', values=(
                download.get('id', ''),
                download.get('title_short', download.get('title', 'N/A')),
                download.get('resolution', 'N/A'),
                download.get('date_formatted', 'N/A'),
                download.get('status', 'N/A')
            ))
    
    def show_context_menu(self, event):
        """Mostra menu de contexto"""
        item = self.history_tree.selection()[0] if self.history_tree.selection() else None
        if item:
            try:
                self.context_menu.tk_popup(event.x_root, event.y_root)
            finally:
                self.context_menu.grab_release()
    
    def get_selected_download_id(self):
        """Obt√©m ID do download selecionado"""
        selection = self.history_tree.selection()
        if selection:
            item = selection[0]
            values = self.history_tree.item(item, 'values')
            return int(values[0]) if values[0] else None
        return None
    
    def open_file(self):
        """Abre arquivo do download selecionado"""
        download_id = self.get_selected_download_id()
        if download_id:
            success, message = self.history_manager.open_download_file(download_id)
            if not success:
                AppUtils.show_error_message("Erro", message)
    
    def open_folder(self):
        """Abre pasta do download selecionado"""
        download_id = self.get_selected_download_id()
        if download_id:
            success, message = self.history_manager.open_download_folder(download_id)
            if not success:
                AppUtils.show_error_message("Erro", message)
    
    def copy_url(self):
        """Copia URL do download selecionado"""
        download_id = self.get_selected_download_id()
        if download_id:
            success, message = self.history_manager.copy_download_url(download_id)
            if success:
                AppUtils.show_info_message("Sucesso", message)
            else:
                AppUtils.show_error_message("Erro", message)
    
    def remove_item(self):
        """Remove item do hist√≥rico"""
        download_id = self.get_selected_download_id()
        if download_id:
            if messagebox.askyesno("Confirmar", "Deseja remover este item do hist√≥rico?"):
                success = self.history_manager.remove_download_from_history(download_id)
                if success:
                    self.update_history()
                else:
                    AppUtils.show_error_message("Erro", "N√£o foi poss√≠vel remover o item")
    
    def clear_history(self):
        """Limpa todo o hist√≥rico"""
        if messagebox.askyesno("Confirmar", "Deseja limpar todo o hist√≥rico? Esta a√ß√£o n√£o pode ser desfeita."):
            success = self.history_manager.clear_history()
            if success:
                self.update_history()
                AppUtils.show_info_message("Sucesso", "Hist√≥rico limpo com sucesso")
            else:
                AppUtils.show_error_message("Erro", "N√£o foi poss√≠vel limpar o hist√≥rico")

class ConfigTab:
    """Aba de configura√ß√µes"""
    
    def __init__(self, parent, config_manager, theme_callback):
        self.parent = parent
        self.config_manager = config_manager
        self.theme_callback = theme_callback
        
        self.frame = tk.Frame(parent)
        self.create_widgets()
        self.setup_layout()
        self.load_current_settings()
    
    def create_widgets(self):
        """Cria widgets da aba de configura√ß√µes"""
        # Se√ß√£o de tema
        self.theme_frame = tk.LabelFrame(self.frame, text="Apar√™ncia", padx=10, pady=10)
        
        self.theme_var = tk.StringVar()
        self.theme_light_radio = tk.Radiobutton(
            self.theme_frame,
            text="Tema Claro",
            variable=self.theme_var,
            value="light",
            command=self.on_theme_change
        )
        self.theme_dark_radio = tk.Radiobutton(
            self.theme_frame,
            text="Tema Escuro",
            variable=self.theme_var,
            value="dark",
            command=self.on_theme_change
        )
        
        # Se√ß√£o de download
        self.download_frame = tk.LabelFrame(self.frame, text="Download", padx=10, pady=10)
        
        self.resolution_label = tk.Label(self.download_frame, text="Resolu√ß√£o Padr√£o:")
        self.resolution_var = tk.StringVar()
        self.resolution_combo = ttk.Combobox(
            self.download_frame,
            textvariable=self.resolution_var,
            values=['360p', '480p', '720p', '1080p', '1440p', '2160p'],
            state='readonly'
        )
        self.resolution_combo.bind('<<ComboboxSelected>>', self.on_resolution_change)
        
        self.auto_open_var = tk.BooleanVar()
        self.auto_open_check = tk.Checkbutton(
            self.download_frame,
            text="Abrir pasta automaticamente ap√≥s download",
            variable=self.auto_open_var,
            command=self.on_auto_open_change
        )
        
        # Bot√µes de a√ß√£o
        self.buttons_frame = tk.Frame(self.frame)
        
        self.reset_button = tk.Button(
            self.buttons_frame,
            text="Restaurar Padr√µes",
            command=self.reset_to_defaults
        )
    
    def setup_layout(self):
        """Configura layout da aba"""
        self.frame.columnconfigure(0, weight=1)
        
        # Se√ß√£o de tema
        self.theme_frame.grid(row=0, column=0, sticky='ew', padx=UIConstants.PADDING, pady=UIConstants.PADDING)
        self.theme_light_radio.grid(row=0, column=0, sticky='w')
        self.theme_dark_radio.grid(row=1, column=0, sticky='w')
        
        # Se√ß√£o de download
        self.download_frame.grid(row=1, column=0, sticky='ew', padx=UIConstants.PADDING, pady=UIConstants.PADDING)
        self.resolution_label.grid(row=0, column=0, sticky='w', pady=(0, 5))
        self.resolution_combo.grid(row=0, column=1, sticky='w', padx=(10, 0), pady=(0, 5))
        self.auto_open_check.grid(row=1, column=0, columnspan=2, sticky='w')
        
        # Bot√µes
        self.buttons_frame.grid(row=2, column=0, sticky='ew', padx=UIConstants.PADDING, pady=UIConstants.PADDING)
        self.reset_button.pack(side=tk.LEFT)
    
    def load_current_settings(self):
        """Carrega configura√ß√µes atuais"""
        # Tema
        self.theme_var.set(self.config_manager.get_theme())
        
        # Resolu√ß√£o
        self.resolution_var.set(self.config_manager.get_resolution())
        
        # Auto-abertura
        self.auto_open_var.set(self.config_manager.get_auto_open_folder())
    
    def on_theme_change(self):
        """Callback para mudan√ßa de tema"""
        new_theme = self.theme_var.get()
        self.config_manager.save_theme(new_theme)
        self.theme_callback(new_theme)
    
    def on_resolution_change(self, event=None):
        """Callback para mudan√ßa de resolu√ß√£o"""
        new_resolution = self.resolution_var.get()
        self.config_manager.save_resolution(new_resolution)
    
    def on_auto_open_change(self):
        """Callback para mudan√ßa de auto-abertura"""
        new_auto_open = self.auto_open_var.get()
        self.config_manager.save_auto_open_folder(new_auto_open)
    
    def reset_to_defaults(self):
        """Restaura configura√ß√µes padr√£o"""
        if messagebox.askyesno("Confirmar", "Deseja restaurar todas as configura√ß√µes para os valores padr√£o?"):
            success = self.config_manager.reset_to_defaults()
            if success:
                self.load_current_settings()
                self.theme_callback(self.config_manager.get_theme())
                AppUtils.show_info_message("Sucesso", "Configura√ß√µes restauradas para os valores padr√£o")
            else:
                AppUtils.show_error_message("Erro", "N√£o foi poss√≠vel restaurar as configura√ß√µes")